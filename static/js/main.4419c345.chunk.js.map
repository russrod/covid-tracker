{"version":3,"sources":["components/Chart/Chart.module.css","components/Chart/Chart.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","components/Cards/Cards.jsx","App.js","serviceWorker.js","index.js","App.module.css","components/Cards/Cards.module.css"],"names":["module","exports","container","Chart","_ref","data","_ref$data","data1","confirmed","recovered","deaths","country","lineChart","length","react_default","a","createElement","es","labels","map","_ref2","date","datasets","label","borderColor","backgroundColor","width","height","options","responsive","maintainAspectRatio","scales","xAxes","stacked","gridLines","color","barChart","value","legend","display","title","text","concat","lib_default","delay","transitionDuration","url","fetchData","Object","asyncToGenerator","regenerator_default","mark","_callee","changeableUrl","_yield$axios$get","_yield$axios$get$data","lastUpdate","wrap","_context","prev","next","axios","get","sent","abrupt","t0","stop","_x","apply","this","arguments","fetchDailyData","_callee2","_yield$axios$get2","modifiedData","_context2","dailyData","total","reportDate","fetchCountries","_ref3","_callee3","_yield$axios$get3","countries","mod","_context3","name","CountryPicker","handleChange","_useState","useState","_useState2","slicedToArray","setCountries","useEffect","t1","fetchApiCount","op","co","i","key","FormControl","NativeSelect","defaultValue","onChange","e","target","Cards","className","styles","Grid","spacing","justify","fadein","item","component","Card","cx","card","infected","CardContent","Typography","gutterBottom","variant","build_default","font","start","end","duration","separator","Date","toDateString","App","state","dta","_this","setState","fetchedData","fetchedData1","_this$state","components_Cards_Cards","components_CountryPicker_CountryPicker","components_Chart_Chart","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4419c345.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__35AjR\"};","import React from 'react'\r\n\r\nimport { Line, Bar } from 'react-chartjs-2'\r\nimport styles from './Chart.module.css'\r\nimport FadeIn from 'react-fade-in';\r\n\r\nconst Chart = ({data, data1: { confirmed, recovered, deaths }, country}) => {\r\n\r\n\tconst options={\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  scales: {\r\n      xAxes: [\r\n        {\r\n          stacked: false,\r\n          gridLines: {\r\n            color: 'rgba(0, 0, 0, 0)',\r\n          },\r\n        },\r\n      ],\r\n      \r\n    },\r\n}\r\n//console.log(props)\r\n\tconst lineChart =(\r\n\t\tdata.length\r\n\t\t?(\r\n\t\t\t<Line\r\n        data={{\r\n          labels: data.map(({ date }) => date),\r\n          datasets: [{\r\n            data: data.map((data) => data.confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#007bff',\r\n            backgroundColor: 'rgba(0, 0, 0, 0)',\r\n            \r\n          }, {\r\n            data: data.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            backgroundColor: 'rgba(0, 0, 0, 0)',\r\n            borderColor: '#ff073a',\r\n          },\r\n          ],\r\n        }}\r\n\r\n        width={800} height={400} options={options}\r\n\r\n      />):null\r\n\r\n\t\t)\r\n\r\n\tconst barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['#007bff', '#28a745', '#ff073a'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n        width={800} height={400}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n\r\n\treturn(\r\n\t\t<FadeIn delay={1800} transitionDuration={700}>\r\n\t\t\r\n\t\t<div>\r\n\t\t\r\n\t\t\r\n\t\t{country ? barChart : lineChart}\r\n\t\t\r\n\t\t\r\n\t\t</div>\r\n\t\t</FadeIn>\r\n\t\t)\r\n}\r\n\r\nexport default Chart","import axios from 'axios'\r\n\r\nconst url='https://covid19.mathdro.id/api'\r\n\r\nexport const fetchData = async (country) =>{\r\n\tlet changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\ttry{\r\n\t\tconst {data: { confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableUrl)\r\n\t\treturn { confirmed, recovered, deaths, lastUpdate }\r\n\t}\r\n\tcatch(error){\r\n\r\n\t}\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n\ttry{\r\n\t\tconst { data } = await axios.get(`${url}/daily`)\r\n\t\tconst modifiedData = data.map((dailyData) =>({\r\n\t\t\tconfirmed:dailyData.confirmed.total,\r\n\t\t\tdeaths:dailyData.deaths.total,\r\n\t\t\tdate:dailyData.reportDate,\r\n\t\t}))\r\n\r\n\t\treturn modifiedData\r\n\t}\t\r\n\tcatch(error){\r\n\r\n\t}\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n\ttry{\r\n\tconst { data: {countries} } = await axios.get(`${url}/countries`)\r\n\t//console.log(response)\r\n\tconst mod =countries.map((country) => country.name)\r\n\treturn mod\r\n}catch(error){\r\n\r\n}\r\n}","import React,{ useState, useEffect } from 'react'\r\nimport { fetchCountries } from '../../api'\r\nimport { FormControl, NativeSelect } from '@material-ui/core'\r\nimport FadeIn from 'react-fade-in';\r\n\r\n\r\nconst CountryPicker =({handleChange})=>{\r\n\tconst [countries, setCountries] = useState([])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchApiCount = async () => {\r\n\t\t \r\n\t\t\tsetCountries(await fetchCountries())\r\n\t\t}\r\n\t\tfetchApiCount()\t\t\r\n\t},[setCountries])\r\n\r\n\t//console.log(countries)\r\n\r\n \tconst op = countries.map((co, i) => <option key={i} value={co}>{co}</option>)\r\n \r\n\treturn(\r\n\t\t<FadeIn delay={2000} transitionDuration={400}>\r\n\r\n\t\t<FormControl>\r\n\t\tSelect a country:\r\n\t\t<NativeSelect defaultValue=\"\" onChange={(e) => handleChange(e.target.value)}>\r\n\t\t\t{op}\r\n\t\t</NativeSelect>\r\n\t\t</FormControl>\r\n\t\t</FadeIn>\r\n\t\t)\r\n}\r\n\r\nexport default CountryPicker","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport styles from './Cards.module.css'\r\nimport cx from 'classnames'\r\nimport FadeIn from 'react-fade-in';\r\n\r\nconst Cards = ({data: { confirmed, recovered, deaths, lastUpdate}}) => { \r\n\tif(!confirmed){\r\n\t\treturn 'Loading.....'\r\n\t}\r\n\treturn (\r\n\t\t\r\n\t\t<div className={styles.container}>\r\n\t\t<Grid className={styles.container} container spacing={3} justify=\"center\">\r\n\t\t<FadeIn delay={200} transitionDuration={500} className={styles.fadein}>\r\n\t\t\t<Grid item component={Card} className={cx(styles.card, styles.infected)}>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<Typography gutterBottom>Infected</Typography>\r\n\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\tclassName={styles.font}\r\n\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\tend={confirmed.value}\r\n\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t<Typography variant=\"body2\">Infected people from COVID-19</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Grid>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t<Grid item component={Card} className={cx(styles.card, styles.recovered)}>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<Typography gutterBottom>Recovered</Typography>\r\n\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\tclassName={styles.font}\r\n\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\tend={recovered.value}\r\n\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t<Typography variant=\"body2\">Recovered people from COVID-19</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Grid>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t<Grid item component={Card} className={cx(styles.card, styles.deaths)}>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<Typography gutterBottom>Deaths</Typography>\r\n\t\t\t\t\t<Typography variant=\"h5\">\r\n\t\t\t\t\t\t<CountUp\r\n\t\t\t\t\t\tclassName={styles.font}\r\n\t\t\t\t\t\t\tstart={0}\r\n\t\t\t\t\t\t\tend={deaths.value}\r\n\t\t\t\t\t\t\tduration={2.5}\r\n\t\t\t\t\t\t\tseparator=\",\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n\t\t\t\t\t<Typography variant=\"body2\">Deaths from COVID-19</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t</Grid>\r\n\t\t\t</FadeIn>\r\n\t\t</Grid>\r\n\t\t\r\n\t\t</div>\r\n\t\t\r\n\t\t)\r\n}\r\nexport default Cards;","import React from 'react';\n//import './App.css';\n/*import logo from './logo.svg';\nimport './App.css';\nimport Greet from './components/Greet';\nimport Welcome from './components/Welcome';\nimport Message from './components/Message'\nimport Counter from './components/Counter'\nimport ParentComponent from './components/ParentComponent'*/\n//import Form from './components/Form'\n/*import ToDo from './components/todo_1'*/\n//import UserForm from './components/UserForm'\nimport { Cards, CountryPicker, Chart } from './components';\nimport styles from './App.module.css'\nimport { fetchData } from './api/'\nimport { fetchDailyData } from './api/'\nclass App extends React.Component {\nstate={\n\tdata:{},\n\tdta:[],\n\tcountry:''\n}\n\nasync componentDidMount(){\n\tconst fetchedData = await fetchData()\n\tconst fetchedData1 = await fetchDailyData()\n\n\t//console.log(fetchedData1)\n\n\tthis.setState({\n\t\tdata: fetchedData,\n\t\tdta: fetchedData1\n\t})\n}\n\nhandleChange = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  }\n\n render() {\nconst { data, dta, country }=this.state\n  return (\n    <div className={styles.container}>\n    <h3>COVID-19</h3>\n    <p>By Russel.R</p>\n    {/*<Message/><br/>\n    <Counter/>\n      <Greet name=\"Virat\">\n      <p>He is best</p>\n      </Greet>\n      <Greet name=\"MSD\"/>\n      <Welcome name=\"Ponting\"/>\n      <Welcome name=\"Lee\"/>\n      <ParentComponent/>*/}\n       {/*<Form/>*/}\n       {/*<ToDo/>*/}\n       {/*<UserForm/>*/}\n       <Cards data={data}/>\n       <CountryPicker handleChange={this.handleChange}/><br/>\n       <Chart country={country} data1={data} data={dta}/>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/*import './index.css';*/\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1PlbN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2gZ4-\",\"card\":\"Cards_card__3dRq_\",\"infected\":\"Cards_infected__1NWBZ\",\"recovered\":\"Cards_recovered__1SCbL\",\"deaths\":\"Cards_deaths__2q2eU\",\"font\":\"Cards_font__3tKDF\",\"fadein\":\"Cards_fadein__2Ca6K\"};"],"sourceRoot":""}